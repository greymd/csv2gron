#!/usr/bin/env python3
import csv
import sys
import argparse

def csv_to_gron(input_file, root_name="json"):
    reader = csv.reader(input_file)
    headers = next(reader)
    valid_columns = [i for i, header in enumerate(headers) if header.startswith(".")]
    for row_index, row in enumerate(reader):
        for col_index in valid_columns:
            header = headers[col_index]
            cell = row[col_index].strip().replace("\\", "\\\\").replace('"', '\\"').replace("\n", "\\n")
            # if cell is empty, don't print it
            if not cell:
                continue
            # if header ends with '[]', it's an array of string
            if header.endswith("[]"):
                header = header[:-2]
                # Separate the array elements by comma
                for i, element in enumerate(cell.split(",")):
                    print(f'json{root_name}[{row_index}]{header}[{i}] = "{element.strip()}";')
            else:
                if cell.lower() in ["true", "false"]:
                    print(f'json{root_name}[{row_index}]{header} = {cell.lower()};')
                elif cell.isnumeric():
                    print(f'json{root_name}[{row_index}]{header} = {cell};')
                else:
                    print(f'json{root_name}[{row_index}]{header} = "{cell}";')

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Convert CSV to gron-like format.")
    parser.add_argument("-l", "--label", default="", help="Root label for JSON output")
    parser.add_argument("-f", "--file", type=argparse.FileType('r'), default=sys.stdin, help="CSV file to read")
    args = parser.parse_args()
    if args.label:
        args.label = f".{args.label}"
    csv_to_gron(args.file, root_name=args.label)
